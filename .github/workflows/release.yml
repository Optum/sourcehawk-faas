name: Release
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Github Ref'
        required: false
        default: 'main'
      draft:
        description: 'Is the release a draft?'
        required: false
        default: 'false'
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: 'false'
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Setup Java and Maven
        uses: actions/setup-java@v1
        with:
          java-version: 8
          server-id: ossrh
          server-username: SONATYPE_USERNAME
          server-password: SONATYPE_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_PRIVATE_KEY }}
          gpg-passphrase: SONATYPE_GPG_PASSPHRASE
      - name: Set Maven Project Version
        id: set_maven_project_version
        shell: bash
        run: |
          RELEASE_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | tail -1 | tr -d '\r\n')
          [[ "$RELEASE_VERSION" == *"-SNAPSHOT" ]] && RELEASE_VERSION="${RELEASE_VERSION%"-SNAPSHOT"}" && ./mvnw --batch-mode versions:set -D removeSnapshot || true
          [[ "$(git tag -l $RELEASE_VERSION)" == "$RELEASE_VERSION" ]] && echo "Tag $RELEASE_VERSION already exists" && exit 1
          echo ::set-output name=RELEASE_VERSION::$RELEASE_VERSION
      - name: Build Maven Project and Deploy Release
        if: success()
        run: ./mvnw --batch-mode deploy -D ci.deploy -D ci.release
      - name: Generate Changelog
        if: success()
        uses: heinrichreimer/github-changelog-generator-action@v2.1.1
        with:
          futureRelease: ${{ format('v{0}', steps.set_maven_project_version.outputs.RELEASE_VERSION) }}
          output: CHANGELOG.md
          releaseBranch: ${{ github.event.inputs.ref }}
          stripGeneratorNotice: true
          token: ${{ secrets.GITHUB_TOKEN }}
          usernamesAsGithubLogins: true
      - name: Tag
        if: success()
        run: |
          git config user.name "$GIT_USERNAME" && git config user.email "$GIT_EMAIL"
          git tag -a "v$RELEASE_VERSION" -m "Release v$RELEASE_VERSION created by @$GITHUB_ACTOR"
          git push origin --tags
        env:
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
          RELEASE_VERSION: ${{ steps.set_maven_project_version.outputs.RELEASE_VERSION }}
      - name: Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('v{0}', steps.set_maven_project_version.outputs.RELEASE_VERSION) }}
          release_name: ${{ format('{0} {1}', github.event.repository.name, steps.set_maven_project_version.outputs.RELEASE_VERSION) }}
          body_path: CHANGELOG.md
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}